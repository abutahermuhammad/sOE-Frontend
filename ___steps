import React, { useState, useEffect } from 'react';

const Quiz = () => {
  const [quizData, setQuizData] = useState(null);
  const [answers, setAnswers] = useState({});

  useEffect(() => {
    // Fetch quiz data from the server based on the selected quiz
    // Update `quizData` with the questions and answer choices
  }, []);

  const handleAnswerSelection = (questionId, selectedAnswer) => {
    // Update the selected answer for the current question in the `answers` state
    setAnswers({
      ...answers,
      [questionId]: selectedAnswer,
    });
  };

  const handleSubmitQuiz = () => {
    // Send the `answers` data to the server for evaluation
    // Receive and display feedback and results
  };

  return (
    <div>
      {quizData && (
        <div>
          {quizData.questions.map((question) => (
            <div key={question.id} className="question">
              <p>{question.text}</p>
              <ul>
                {question.choices.map((choice, index) => (
                  <li key={index}>
                    <input
                      type="radio"
                      id={`choice-${index}`}
                      name={`question-${question.id}`}
                      value={choice}
                      onChange={() => handleAnswerSelection(question.id, choice)}
                    />
                    <label htmlFor={`choice-${index}`}>{choice}</label>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      )}
      <button onClick={handleSubmitQuiz}>Submit</button>
    </div>
  );
};

export default Quiz;

// validation answer on server side
// Assuming `userAnswers` is an array of user selections with corresponding question IDs
const userSelections = await Promise.all(userAnswers.map(async (answer) => {
  const question = await Question.findById(answer.questionId).select('correctAnswer');
  return {
    isCorrect: question.correctAnswer === answer.userChoice,
    questionId: answer.questionId,
  };
}));

// validation code on client----------------
const questions = await Question.find({ quizId: quizId }).select('text choices correctAnswer');

// database model---------------------
{
  "_id": ObjectId("your_generated_id"),
  "quizId": ObjectId("quiz_id_reference"),
  "text": "What is the capital of Bangladesh?",
  "choices": ["A. Dhaka", "B. Jashore", "C. Khulna", "D. Barishal"],
  "correctAnswer": "A"
}


import React, { Component } from 'react';

class TimeInput extends Component {
  constructor(props) {
    super(props);
    this.state = {
      hours: 0,
      minutes: 0,
      seconds: 0,
    };
  }

  handleInputChange = (e) => {
    const { name, value } = e.target;
    this.setState({ [name]: value });
  }

  render() {
    return (
      <div>
        <input
          type="number"
          name="hours"
          value={this.state.hours}
          onChange={this.handleInputChange}
        />
        <span> Hours</span>
        <input
          type="number"
          name="minutes"
          value={this.state.minutes}
          onChange={this.handleInputChange}
        />
        <span> Minutes</span>
        <input
          type="number"
          name="seconds"
          value={this.state.seconds}
          onChange={this.handleInputChange}
        />
        <span> Seconds</span>
      </div>
    );
  }
}

export default TimeInput;

// restrict multiple
// Assuming you have a sessions collection in MongoDB
const sessionsCollection = db.collection('sessions'); // Replace with your actual collection name

function restrictMultipleLogins(req, res, next) {
  if (req.isAuthenticated()) {
    // Find active sessions for the current user
    sessionsCollection.findOne({ userId: req.user._id, active: true }, (err, session) => {
      if (err) {
        console.error('Error checking active sessions:', err);
        return res.redirect('/login'); // Handle the error as per your application's requirements
      }

      if (session) {
        // If an active session exists, log out the user from the previous session
        req.logout();
        return res.redirect('/login');
      }

      // If no active session exists, continue with the current request
      next();
    });
  } else {
    next();
  }
}

// Assuming you have a sessions collection in MongoDB
const sessionsCollection = db.collection('sessions'); // Replace with your actual collection name

function restrictMultipleLogins(req, res, next) {
  if (req.isAuthenticated()) {
    // Find active sessions for the current user
    sessionsCollection.findOne({ userId: req.user._id, active: true }, (err, session) => {
      if (err) {
        console.error('Error checking active sessions:', err);
        return res.redirect('/login'); // Handle the error as per your application's requirements
      }

      if (session) {
        // If an active session exists, prevent the new login
        return res.status(403).send('Multiple logins are not allowed.'); // You can customize the error message and response code
      }

      // If no active session exists, continue with the current request
      next();
    });
  } else {
    next();
  }
}


const express = require('express');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const MongoClient = require('mongodb').MongoClient;
const bcrypt = require('bcrypt'); // For password hashing
const uid = require('uid-safe'); // For generating unique session keys

const app = express();

// Replace with your MongoDB connection URI
const mongoURI = 'mongodb://localhost:27017/myapp';

// Connect to MongoDB
MongoClient.connect(mongoURI, { useNewUrlParser: true })
  .then(client => {
    const db = client.db();
    const usersCollection = db.collection('users'); // Use your MongoDB collection name for users
    const sessionsCollection = db.collection('sessions'); // Use your MongoDB collection name for sessions

    // Configure session middleware
    app.use(session({
      secret: 'your-secret-key', // Replace with a strong, unique secret key
      resave: false,
      saveUninitialized: true,
    }));

    // Initialize Passport for user authentication
    app.use(passport.initialize());
    app.use(passport.session());

    // Configure Passport to use a LocalStrategy for user authentication
    passport.use(new LocalStrategy(
      function(username, password, done) {
        usersCollection.findOne({ username: username }, function(err, user) {
          if (err) { return done(err); }
          if (!user) { return done(null, false); }
          if (!bcrypt.compareSync(password, user.password)) { return done(null, false); }
          return done(null, user);
        });
      }
    ));

    // Serialize user object to store in the session
    passport.serializeUser(function(user, done) {
      done(null, user._id);
    });

    // Deserialize user object from the session
    passport.deserializeUser(function(id, done) {
      usersCollection.findOne({ _id: id }, function(err, user) {
        done(err, user);
      });
    });

    // Route to handle user login
    app.post('/login', passport.authenticate('local', { successRedirect: '/dashboard', failureRedirect: '/login' }));

    // Route to handle user logout
    app.get('/logout', function(req, res) {
      req.logout();
      res.redirect('/');
    });

    // Function to generate a session key
    function generateSessionKey() {
      return uid.sync(24); // Generates a 24-character unique session key
    }

    // Middleware to restrict multiple device logins
    function restrictMultipleLogins(req, res, next) {
      if (req.isAuthenticated()) {
        const sessionKey = req.sessionID;

        // Look up the session key in the database
        sessionsCollection.findOne({ sessionKey: sessionKey }, (err, session) => {
          if (err) {
            console.error('Error checking session:', err);
            return res.redirect('/login');
          }

          if (!session || session.expired) {
            // The session does not exist or has expired
            // Handle it as needed (e.g., log the user out or deny access)
            req.logout();
            return res.redirect('/login');
          }

          next();
        });
      } else {
        next();
      }
    }

    // Apply the restrictMultipleLogins middleware to relevant routes
    app.get('/dashboard', restrictMultipleLogins, function(req, res) {
      res.send('Welcome to the dashboard!');
    });

    app.listen(3000, () => {
      console.log('Server is running on port 3000');
    });
  })
  .catch(err => {
    console.error('Error connecting to MongoDB:', err);
  });

// nav------------------
  <div className="navbar bg-base-100">
  <div className="navbar-start">
    <div className="dropdown">
      <label tabIndex={0} className="btn btn-ghost lg:hidden">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h8m-8 6h16" /></svg>
      </label>
      <ul tabIndex={0} className="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
        <li><a>Item 1</a></li>
        <li>
          <a>Parent</a>
          <ul className="p-2">
            <li><a>Submenu 1</a></li>
            <li><a>Submenu 2</a></li>
          </ul>
        </li>
        <li><a>Item 3</a></li>
      </ul>
    </div>
    <a className="btn btn-ghost normal-case text-xl">daisyUI</a>
  </div>
  <div className="navbar-center hidden lg:flex">
    <ul className="menu menu-horizontal px-1">
      <li><a>Item 1</a></li>
      <li tabIndex={0}>
        <details>
          <summary>Parent</summary>
          <ul className="p-2">
            <li><a>Submenu 1</a></li>
            <li><a>Submenu 2</a></li>
          </ul>
        </details>
      </li>
      <li><a>Item 3</a></li>
    </ul>
  </div>
  <div className="navbar-end">
    <a className="btn">Button</a>
  </div>
</div>

import React, { useState } from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import axios from 'axios';

const CalendarComponent = () => {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [data, setData] = useState([]);

  const handleDateChange = async (date) => {
    setSelectedDate(date);

    try {
      // Make an API call to fetch data based on the selected date
      const response = await axios.get(`/api/data/${date.toISOString().split('T')[0]}`);
      setData(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <DatePicker selected={selectedDate} onChange={handleDateChange} />
      {/* Render data based on the selected date */}
      {data.map((item) => (
        <div key={item._id}>
          <p>Exam: {item.exam}</p>
          <p>Routine Class: {item.routineClass}</p>
          {/* Other fields... */}
        </div>
      ))}
    </div>
  );
};

if (isAdmit) {
  // Check if the roll also exists in the result collection
  const resultCollection = db.collection('resultCollection');
  const isResultExist = await resultCollection.findOne({ roll: roll, examName: examName });

  if (isResultExist) {
    // If the roll exists in both collections, send a message
    res.json({ message: 'Roll already exists in both collections' });
  } else {
    // If the roll only exists in the admission collection, retrieve the results
    const results = await resultCollection.find({ roll: roll, examName: examName }).toArray();
    res.json(results);
  }
} else {
  // If the roll doesn't exist in the admission collection
  res.status(404).json({ error: 'Roll not found for the provided exam name' });
}
} catch (error) {
console.error('Error:', error);
res.status(500).json({ error: 'Internal Server Error' });
} finally {
await client.close();
}